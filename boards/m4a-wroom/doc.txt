/*
 * Copyright (C) 2018 Gunar Schorcht
 * Copyright (C) 2022 Mesh4all <mesh4all.org>
 *
 * This file is subject to the terms and conditions of the GNU Lesser
 * General Public License v2.1. See the file LICENSE in the top level
 * directory for more details.
 */

/**
 * @defgroup    boards_m4a-wroom
 * @ingroup     boards
 * @brief       Mesh4All based esp32-boards.
 * @author      Gunar Schorcht <gunar@schorcht.net>
 * @author      Eduardo Az√≥car <eduardo@turpialdev.com>

## Table of Contents {#m4a_wroom_toc}

1. [Overview](#m4a_wroom_overview)
2. [Hardware](#m4a_wroom_hardware)
    1. [MCU](#m4a_wroom_mcu)
    2. [Board Configuration](#m4a_wroom_board_configuration)
    3. [Board Pinout](#m4a_wroom_pinout)
    4. [Optional Hardware Configurations](#m4a_wroom_optional_hardware)
3. [Flashing the Device](#m4a_wroom_flashing)

## Overview {#m4a_wroom_overview}

\image html "https://dl.espressif.com/dl/schematics/pictures/esp32-devkitc-v4-front.jpg" "Espressif ESP32-DevKitC V4" width=400px

[Back to table of contents](#m4a_wroom_toc)

## Hardware {#m4a_wroom_hardware}

This section describes

- the [MCU](#m4a_wroom_mcu),
- the default [board configuration](#m4a_wroom_board_configuration),
- [optional hardware configurations](#m4a_wroom_optional_hardware),
- the [board pinout](#m4a_wroom_pinout).

[Back to table of contents](#m4a_wroom_toc)

### MCU {#m4a_wroom_mcu}

Most features of the board are provided by the ESP32 SoC. For detailed
information about the ESP32, see section  esp32_mcu_esp32 "MCU ESP32".

[Back to table of contents](#m4a_wroom_toc)

### Board Configuration {#m4a_wroom_board_configuration}

The m4a_wroom do not have special hardware on board and all
GPIOs are simply broken out for flexibility. Therefore, the board
configuration is the most flexible one with provides:

18 x ADC channels at maximum
2 x DAC channels at maximum
2 x SPI at maximum
1 x I2C at maximum
2 x UART

Since all GPIOs have broken out, GPIOs can be used for different purposes
in different applications. For flexibility, GPIOs can be listed in various
peripheral configurations. For example, GPIO13 is used in the ADC channel
definition and the definition of the MOSI signal of SPI_DEV(0).

This is possible because GPIOs are only used for a specific peripheral
interface when

- the corresponding peripheral module is used, e.g. `periph_i2c`, or
- a corresponding init function is called z. `adc_init`, `dac_init` and
  `pwm_init` or
- The corresponding peripheral interface is used for the first time,
  e.g. `spi_aqcuire.

That is, the purpose for which a GPIO is used depends on which module
or function is used first.

For example, if module periph_i2c is not used, the GPIOs listed in I2C
configuration can be used for the other purposes.

The following table shows the default board configuration, which is sorted
according to the defined functionality of GPIOs. This configuration can be
overridden by  esp32_application_specific_configurations
"application-specific configurations".

<center>
Function        | GPIOs  | Remarks |Configuration
:---------------|:-------|:--------|:----------------------------------
BUTTON0         | GPIO0  | | |
DS18B20         | GPIO14 | DS18B20 sensor| |
MOISTURE SENSOR | GPIO12 | Moisture Analog Sensor v1.3 |  |
ADC             | GPIO0, GPIO2, GPIO4, GPIO12, GPIO13,\n GPIO14, GPIO15, GPIO25, GPIO26, GPIO27,\n GPIO32, GPIO33, GPIO34, GPIO35, GPIO36,\n GPIO39 | | see  esp32_adc_channels "ADC Channels"
DAC             | GPIO25, GPIO26 | |  esp32_dac_channels "refer"
PWM_DEV(0)      | GPIO0, GPIO2, GPIO4, GPIO16, GPIO17 | - |  esp32_pwm_channels "DAC Channels"
PWM_DEV(1)      | GPIO27, GPIO32, GPIO33 | - |  esp32_pwm_channels "PWM Channels"
I2C_DEV(0):SDA  | GPIO21 | |  esp32_i2c_interfaces "I2C Interfaces"
I2C_DEV(0):SCL  | GPIO22 | |  esp32_i2c_interfaces "I2C Interfaces"
SPI_DEV(0):CLK  | GPIO18 | VSPI is used | |
SPI_DEV(0):MISO | GPIO19 | VSPI is used | |
SPI_DEV(0):MOSI | GPIO23 | VSPI is used | |
SPI_DEV(0):CS0  | GPIO5  | VSPI is used | |
SPI_DEV(1):CLK  | GPIO14 | HSPI is used | |
SPI_DEV(1):MISO | GPIO12 | HSPI is used | |
SPI_DEV(1):MOSI | GPIO13 | HSPI is used | |
SPI_DEV(1):CS0  | GPIO15 | HSPI is used | |
UART_DEV(0):TxD | GPIO1  | Console (configuration is fixed) | |
UART_DEV(0):RxD | GPIO3  | Console (configuration is fixed) | |
UART_DEV(1):TxD | GPIO10 | not available in **qout** and **qio** flash mode | |
UART_DEV(1):RxD | GPIO9  | not available in **qout** and **qio** flash mode | |
UART_DEV(2):TxD | GPIO17  | Serial communication |  |
UART_DEV(2):RxD | GPIO16  | Serial communication |  |
</center>
\n
@note
- The configuration of ADC channels contains all m4a_wroom GPIOs that can be
  used as ADC channels.
- The configuration of DAC channels contains all m4a_wroom GPIOs that can be used
  as DAC channels.

For detailed information about the configuration of m4a_wroom boards, see
section  m4a_wroom_peripherals "Common Peripherals".

[Back to table of contents](#m4a_wroom_toc)

### Optional Hardware Configurations {#m4a_wroom_optional_hardware}

MRF24J40-based IEEE 802.15.4 radio modules and ENC28J60-based Ethernet
network interface modules have been tested with the board. You could use
the following code in your m4a_wroom_application_specific_configurations
"application-specific configuration" to use such modules:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{.c}
#ifdef BOARD_M4A_WROOM

#if MODULE_MRF24J40
#define MRF24J40_PARAM_CS       GPIO16       /* MRF24J40 CS signal    */
#define MRF24J40_PARAM_RESET    GPIO17       /* MRF24J40 RESET signal */
#define MRF24J40_PARAM_INT      GPIO34       /* MRF24J40 INT signal   */
#define MRF24J40_PARAM_SPI_CLK  SPI_CLK_1MHZ /* SPI clock frequency */
#endif

#if MODULE_ENC28J80
#define ENC28J80_PARAM_CS       GPIO32      /* ENC28J80 CS signal    */
#define ENC28J80_PARAM_RESET    GPIO33      /* ENC28J80 RESET signal */
#define ENC28J80_PARAM_INT      GPIO35      /* ENC28J80 INT signal   */
#endif

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
For other parameters, the default values defined by the drivers can be used.

@note The **RESET** signal of MRF24J40 and ENC28J60 based modules can also
be connected to the **RST** pin of the board (see  m4a_wroom_pinout
"pinout") to keep the configured GPIO free for other purposes.

[Back to table of contents](#m4a_wroom_toc)

### Board Pinout {#m4a_wroom_pinout}

The following figure shows the pinout of the defined default configuration
for m4a_wroom board.
The light green GPIOs are not used by configured on-board hardware components
and can be used for any purpose. However, if optional off-board hardware
modules are used, these GPIOs may also be occupied, see
section m4a_wroom_board_configuration for more information.

The corresponding board schematics can be found her [here]
(https://dl.espressif.com/dl/schematics/esp32_devkitc_v4-sch-20180607a.pdf)

[Back to table of contents](#m4a_wroom_toc)

## Flashing the Device {#m4a_wroom_flashing}

Flashing RIOT is quite easy. The board has a Micro-USB connector with
reset/boot/flash logic. Just connect the board to your host computer
and type using the programming port:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
make flash BOARD=m4a_wroom ...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[Back to table of contents](#m4a_wroom_toc)
 */
